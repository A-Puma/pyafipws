# This workflow will install Python dependencies, build EXE and run some tests in Windows
# For more information see: https://github.com/py2exe/py2exe/blob/master/.github/workflows/CI.yml

name: Windows Installer

on: [push]

jobs:
  compile:

    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10"]
        targetplatform: [x86, x64]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
        architecture : ${{ matrix.targetplatform }}
    - name: Upgrade the package manager and related libraries
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade setuptools wheel
        python -m pip install --upgrade cachetools pefile
    - name: Install production dependencies
      run: |
        pip install -r requirements.txt
    - name: Install development dependencies
      run: |
        pip install -r requirements-dev.txt
    - name: Remove python2 library conflicts with py2exe
      run: |
        python -c "import aenum, os; os.unlink(os.path.join(os.path.dirname(aenum.__file__), '_py2.py'))"
    - name: Install package
      run: |
        python setup.py install
    - name: Build executables
      run: |
        python setup_win.py py2exe
    - name: Deploy distribution binaries
      uses: actions/upload-artifact@v2
      with:
        name: dist-${{ matrix.targetplatform }}
        path: |
          dist/

  test:
    name: "Full End-2-End test"
    needs: compile
    runs-on: windows-latest
    strategy:
      matrix:
        targetplatform: [x86, x64]
    steps:
    - name: Download distribution binaries
      uses: actions/download-artifact@v3
      with:
        name: dist-${{ matrix.targetplatform }}
    - name: Download certificate and private key
      run: |
        Invoke-WebRequest -Uri "https://www.sistemasagiles.com.ar/soft/pyafipws/reingart2021.zip" -OutFile reingart2019.zip
        Expand-Archive reingart2019.zip -DestinationPath .
    - name: Copy rece.ini file
      run: |
        copy conf\rece.ini .
    - name: Test WSAA command line interface
      run: |
        .\wsaa.exe reingart.crt reingart.key wsmtxca
    - name: Register WSAA component
      run: |
        .\wsaa.exe --register
        Get-Content -Path $Env:APPDATA\wsaa.log -ErrorAction SilentlyContinue
    - name: Register WSAA component (debug)
      continue-on-error: true
      run: |
        reg export "HKEY_CLASSES_ROOT\CLSID\{51342E57-9681-4610-AF2B-686267470930}" wsaa.reg
        type wsaa.reg
    - name: Register WSFEv1 component
      run: |
        .\wsfev1.exe --register
        Get-Content -Path $Env:APPDATA\wsfev1.log -ErrorAction SilentlyContinue
    - name: Register WSFEv1 component (debug)
      continue-on-error: true
      run: |
        reg export "HKEY_CLASSES_ROOT\CLSID\{FA1BB90B-53D1-4FDA-8D1F-DEED2700E739}" wsfev1.reg
        type wsfev1.reg
    - name: Test WSAA COM server automation
      run: |
        $wsaa = New-Object -ComObject WSAA
        echo $wsaa.InstallDir()
        $curdir = Get-Location
        $cert = Join-Path -Path $curdir -ChildPath "reingart.crt"
        $pkey = Join-Path -Path $curdir -ChildPath "reingart.key"
        [xml]$ta = $WSAA.Autenticar( "wsfe", $cert , $pkey )
        $ta.Save("ta.xml")
        describe TestTA { it 'Authentication access ticket ok' { $ta.loginTicketResponse.header.source | Should -Be 'CN=wsaahomo, O=AFIP, C=AR, SERIALNUMBER=CUIT 33693450239' } }
        describe TestToken { it 'Token OK' { $WSAA.Token() | Should -Not -BeNullOrEmpty } }
        describe TestSign { it 'Sign OK' { $WSAA.Sign() | Should -Not -BeNullOrEmpty } }
    - name: Test WSFEv1 COM server automation
      run: |
        $wsfev1 = New-Object -ComObject WSFEv1
        echo $wsfev1.Version()
        echo $wsfev1.InstallDir()
        $wsfev1.Conectar()
        $wsfev1.Dummy()
        describe TestDummy { it 'Dummy response ok' { $wsfev1.AppServerStatus() | Should -Be 'OK' } }
        $wsfev1.Cuit = "20267565393"
        $ta = Get-Content ta.xml
        $wsfev1.SetTicketAcceso([string]$ta)
        $tipo_cbte = 6
        $punto_vta = 4002
        [int]$ult = $wsfev1.CompUltimoAutorizado($tipo_cbte, $punto_vta)
        describe TestUlt { it 'Last invoice number ok' { [int]$wsfev1.CbteNro() | Should -BeGreaterOrEqual 1 } }
        $fecha_cbte = (Get-Date).tostring("yyyyMMdd")
        [int]$cbte_num = [int]$ult + 1
        $ok = $wsfev1.CrearFactura(1, 80, 33693450239, $tipo_cbte, $punto_vta, `
                                   $cbte_num, $cbte_num, 121, 0, 100, `
                                   21, 0, 0, $fecha_cbte, "", "", "", `
                                   "PES", "1")
        $ok = $wsfev1.AgregarIva(5, 100, 21)
        $CAE = $wsfev1.CAESolicitar()
        describe TestInvoiceResult { it 'Invoice result ok' { [int]$wsfev1.Resultado() | Should -Be 'A' } }
        describe TestInvoiceAuthCode { it 'Invoice auth code ok' { [int]$wsfev1.CAE() | Should -Not -BeNullOrEmpty } }
        describe TestInvoiceNoException { it 'No exception' { [int]$wsfev1.Excepcion() | Should -BeNullOrEmpty } }
        describe TestInvoiceNoError { it 'No error' { [int]$wsfev1.ErrMsg() | Should -BeNullOrEmpty } }
        describe TestException { it 'raises exception' { $wsfev1.ParamGetCotizacion("USD") | Should -Throw COMException } }
        $wsfev1.CompConsultar(1, 1, 1)
        describe TestError { it 'returns error' { $wsfev1.ErrMsg() | Should -Be "602: No existen datos en nuestros registros para los parametros ingresados." } }

  pre-release:
    name: "Pre Release"
    needs: compile
    runs-on: "ubuntu-latest"

    steps:
      - name: Download distribution binaries
        uses: actions/download-artifact@v3
        with:
          name: dist-x86
          path: dist-32
      - name: Create ZIP archive
        run: |
          zip dist-32.zip -r dist-32
      - name: Download distribution binaries
        uses: actions/download-artifact@v3
        with:
          name: dist-x64
          path: dist-64
      - name: Create ZIP archive
        run: |
          zip dist-64.zip -r dist-64
      - uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: ${{ (github.ref != 'main') && 'beta' || 'latest' }}
          prerelease: ${{ (github.ref != 'main') }}
          title: "Development Build ${{ github.sha }}"
          files: |
            dist-32.zip
            dist-64.zip